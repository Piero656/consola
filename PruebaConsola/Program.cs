// See https://aka.ms/new-console-template for more information

using QuickType;
using System.Net.Http.Json;

Console.WriteLine("Consumiendo API");


int opt = 0;
Resultado resultadoData = new Resultado();

HttpClient client = new HttpClient();
var responseTask = await client.GetAsync("http://dummy.restapiexample.com/api/v1/employees");


if (responseTask.IsSuccessStatusCode)
{
    var content = await responseTask.Content.ReadAsStringAsync();
    resultadoData = Resultado.FromJson(content);

}
else
{
    Console.WriteLine("error al optener la información");
}





do
{
    Console.WriteLine("Menu de opciones\n\n");
    Console.WriteLine("opt 1: Listar empleados");
    Console.WriteLine("opt 2: agregar un nueva empleado de la lista");


    Console.WriteLine("\nIngrese una opcion");


    opt = Convert.ToInt32(Console.ReadLine());

    switch (opt)
    {


        case 1:

            foreach (var item in resultadoData!.Data!)
            {
                Console.WriteLine($"{item.Id} -- {item.EmployeeName}");
            }

            break;


        case 2:


            Console.WriteLine("\nEl id del empleado que desea agregar");


            var id = Convert.ToInt32(Console.ReadLine());


            var empleado = resultadoData!.Data!.Where(x => x.Id == id).FirstOrDefault();

            if (empleado != null)
            {
                var responsePost = await client.PostAsJsonAsync("https://localhost:44363/api/employee", new
                {
                    Name = empleado.EmployeeName,
                    Document_Number = "",
                    Salary = empleado.EmployeeSalary,
                    Age = empleado.EmployeeAge,
                    Profile = empleado.ProfileImage,
                    Phone = "998544772",
                    Email = "pablo@gmail.com"
                });

                if (responsePost.IsSuccessStatusCode)
                {
                    Console.WriteLine("Empleado agregado");
                }
                else
                {
                    Console.WriteLine("Error al agregar empleado");
                }
            }
            else
            {
                 Console.WriteLine("id no valido!!");
            }





            break;


        default:
            break;
    }




} while (opt >= 0);



















// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var resultado = Resultado.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Resultado
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("data")]
        public Datum[] Data { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("employee_name")]
        public string EmployeeName { get; set; }

        [JsonProperty("employee_salary")]
        public long EmployeeSalary { get; set; }

        [JsonProperty("employee_age")]
        public long EmployeeAge { get; set; }

        [JsonProperty("profile_image")]
        public string ProfileImage { get; set; }
    }

    public partial class Resultado
    {
        public static Resultado FromJson(string json) => JsonConvert.DeserializeObject<Resultado>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Resultado self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
